generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  username                String?         @unique
  email                   String          @unique
  emailVerified           DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  accounts                Account[]
  Authenticators          Authenticator[]
  sessions                Session[]

  image                   String?
  imageId                 String?         @default("")

  activeDaysHistory       DateTime[]      @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  socials                 String          @default("{\"tiktok\":\"\",\"instagram\":\"\",\"twitter\":\"\"}")

  favorPoints             Int             @default(4)
  sentFavors              String          @default("[]")
  receivedFavors          String          @default("[]")
  favorGroups             String[]

  sentFriendRequests      String          @default("[]")
  receivedFriendRequests  String          @default("[]")
  friends                 String          @default("[]")

  xata_id                String          @ignore @unique(map: "User__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version           Int             @ignore @default(0)
  xata_createdat         DateTime        @ignore @default(now()) @db.Timestamptz(6)
  xata_updatedat         DateTime        @ignore @default(now()) @db.Timestamptz(6)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model FavorGroup {
  id          String    @id @default(cuid())
  owner       String                           // ID of the user who created the group / is currently the owner
  admins      String    @default("")           // Stringified Array of admin minimalUser types
  name        String?
  image       String?   @default("")
  imageId     String?   @default("")
  free        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     String    @default("[]")         // Stringified array of minimalUser types
  favors      String    @default("[]")         // Stringified array of favor types

  xata_id        String   @ignore @unique(map: "FavorGroup__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @ignore @default(0)
  xata_createdat DateTime @ignore @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @ignore @default(now()) @db.Timestamptz(6)
}

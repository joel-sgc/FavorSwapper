generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accounts          Account[]
  Authenticator     Authenticator[]
  sessions          Session[]

  activeDaysHistory DateTime[]      @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  favorPoints       Int             @default(5)
  socials           String          @default("{tiktok: '', instagram: '', twitter: ''}")
  
  xata_id           String          @unique(map: "User__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version      Int             @default(0)
  xata_createdat    DateTime        @default(now()) @db.Timestamptz(6)
  xata_updatedat    DateTime        @default(now()) @db.Timestamptz(6)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  xata_id           String   @unique(map: "Account__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version      Int      @default(0)
  xata_createdat    DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat    DateTime @default(now()) @db.Timestamptz(6)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken   String   @unique
  userId         String
  expires        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  xata_id        String   @unique(map: "Session__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
}

model VerificationToken {
  identifier     String
  token          String
  expires        DateTime
  
  xata_id        String   @unique(map: "VerificationToken__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String   @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  xata_id              String   @unique(map: "Authenticator__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version         Int      @default(0)
  xata_createdat       DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat       DateTime @default(now()) @db.Timestamptz(6)

  @@id([userId, credentialID])
}

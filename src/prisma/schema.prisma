generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  Favor objects will be shared between senders/receivers and stored within favor groups
// {
  // id: cuid()
  // title: String
  // description: String
  // favorValue: number
  // sender: {id, name}

  // Next 2 are interchangable depending on whether it's a 
  
  // user-user
  // or
  // user-group 

  // receiver: {id, name}
// }

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         @unique
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  Authenticators Authenticator[]
  sessions       Session[]

  activeDaysHistory DateTime[] @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  socials           String     @default("{\"tiktok\":\"\",\"instagram\":\"\",\"twitter\":\"\"}")

  favorPoints    Int          @default(4)
  sentFavors     String       @default("[]")        // array of favor objects signifying favors. 
  receivedFavors String       @default("[]")
  favorGroups    String       @default("[]")

  sentFriendRequests     String @default("[]")
  receivedFriendRequests String @default("[]")
  friends                String @default("[{}]")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model FavorGroup {
  id        String   @id @default(cuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   String   @default("[]")     // Stringified array of user ids and names
  favors    String   @default("[]")
}